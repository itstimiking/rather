{"ast":null,"code":"var _jsxFileName = \"/home/timiking/Apps/rather/src/routes/home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport QuestionAbbr from '../components/QuestionAbbr';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchQuestions } from \"../redux/reducers/slices/questions\";\nimport { fetchAllUsers } from \"../redux/reducers/slices/users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Home() {\n  _s();\n\n  const dispatch = useDispatch();\n  const questions = useSelector(state => state.questions.questions);\n  const user = useSelector(state => state.users.user);\n  const [questionsToShow, setQuestionsToShow] = useState(\"Answered\");\n  const [questionsList, setQuestionsList] = setState([]);\n  useEffect(() => {\n    dispatch(fetchQuestions()); // Fetch all questions\n\n    dispatch(fetchAllUsers()); // Fetch all users\n  }, [dispatch]);\n\n  const filterQuestions = filterString => {\n    if (filterString === \"Answered\") {\n      const answered = questions.filter(question => {\n        return question.optionOne.votes.includes(user.name) && question.optionTwo.votes.includes(user.name);\n      });\n      console.log(answered + \"::::::::: ANSWERED ::::::\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center w-full\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"md:w-4/6 w-5/6 min-h-0 border-2 rounded-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-12 w-full border-2 flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `w-1/2 h-full border-r-2 ${questionsToShow === \"Answered\" ? \"bg-blue-400 text-white\" : \"\"}`,\n          onClick: () => questionsToShow !== \"Answered\" ? setQuestionsToShow(\"Answered\") : \"\",\n          children: \"Answered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `w-1/2 h-full border-r-2 ${questionsToShow === \"Unanswered\" ? \"bg-blue-400 text-white\" : \"\"}`,\n          onClick: () => questionsToShow !== \"Unanswered\" ? setQuestionsToShow(\"Unanswered\") : \"\",\n          children: \"Unanswered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full min-h-0 p-10 flex flex-col space-y-5\",\n        children: [questions && Object.entries(questions).map(question => /*#__PURE__*/_jsxDEV(QuestionAbbr, {\n          question: question[1]\n        }, question[0], false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 67\n        }, this)), questionsToShow === \"Unanswered\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(QuestionAbbr, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"Xk0+W6nUBWek5e/zeeKmytKygIo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/timiking/Apps/rather/src/routes/home.js"],"names":["React","useState","useEffect","QuestionAbbr","useDispatch","useSelector","fetchQuestions","fetchAllUsers","Home","dispatch","questions","state","user","users","questionsToShow","setQuestionsToShow","questionsList","setQuestionsList","setState","filterQuestions","filterString","answered","filter","question","optionOne","votes","includes","name","optionTwo","console","log","Object","entries","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport QuestionAbbr from '../components/QuestionAbbr';\n\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {fetchQuestions} from \"../redux/reducers/slices/questions\";\nimport {fetchAllUsers} from \"../redux/reducers/slices/users\";\n\nfunction Home() {\n\n    const dispatch = useDispatch();\n    const questions = useSelector(state => state.questions.questions);\n    const user = useSelector(state => state.users.user);\n    \n    const [questionsToShow, setQuestionsToShow] = useState(\"Answered\");\n\n    const [questionsList, setQuestionsList] = setState([])\n\n    useEffect(()=>{\n        dispatch(fetchQuestions()) // Fetch all questions\n        dispatch(fetchAllUsers()) // Fetch all users\n    },[dispatch])\n\n    const filterQuestions = (filterString)=>{\n        if(filterString === \"Answered\"){\n            const answered = questions.filter((question)=> {\n                return (question.optionOne.votes.includes(user.name) && question.optionTwo.votes.includes(user.name))\n            })\n\n            console.log(answered + \"::::::::: ANSWERED ::::::\")\n        }\n    }\n\n    return (\n        <div className=\"flex justify-center w-full\">\n\n            <div className=\"md:w-4/6 w-5/6 min-h-0 border-2 rounded-md\">\n\n                <div className=\"h-12 w-full border-2 flex\">\n                    <button \n                        className={\n                            `w-1/2 h-full border-r-2 ${questionsToShow === \"Answered\"? \"bg-blue-400 text-white\": \"\"}`\n                        }\n                        onClick={()=> questionsToShow !== \"Answered\" ? setQuestionsToShow(\"Answered\") : \"\"}\n                    >\n                        Answered Questions\n                    </button>\n                    <button \n                        className={\n                            `w-1/2 h-full border-r-2 ${questionsToShow === \"Unanswered\"? \"bg-blue-400 text-white\": \"\"}`\n                        }\n                        onClick={()=> questionsToShow !== \"Unanswered\" ? setQuestionsToShow(\"Unanswered\") : \"\"}\n                    >\n                        Unanswered Questions\n                    </button>\n                </div>\n\n                <div className=\"w-full min-h-0 p-10 flex flex-col space-y-5\">\n\n                    {\n                        questions && \n                        Object.entries(questions).map(question => <QuestionAbbr key={question[0]} question={question[1]} /> )\n                        \n                    }\n\n                    {\n                        questionsToShow === \"Unanswered\" && (\n                            <>\n                                <QuestionAbbr />\n                            </>\n                        )\n                    }\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}