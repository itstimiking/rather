{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { _getQuestions } from \"../../../_DATA\"; // Initial store \n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  questions: {}\n}; // Questions slice\n\nconst slice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers: {\n    startLoading: state => {\n      state.loading = true;\n    },\n    addQuestion: (state, action) => {\n      state.questions.unshift(action.payload); //TO-DO\n    },\n    getOneQuestion: (state, action) => {\n      state.loading = action.payload;\n    },\n    getQuestionsSuccess: (state, action) => {\n      state.questions = action.payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getQuestionsFailure: state => {\n      state.loading = false; //handling Errors\n\n      state.hasErrors = true;\n    }\n  }\n}); // Actions generated from the slice\n\nconst {\n  addQuestion,\n  startLoading,\n  getQuestionsFailure,\n  getQuestionsSuccess\n} = slice.actions; // export The reducer\n\nexport default slice.reducer; // export user selector to get the slice in any component\n\nexport const questionsSelector = state => state.questions; // Thunk Actions\n\nexport const fetchQuestions = () => async dispatch => {\n  try {\n    dispatch(startLoading());\n    const response = await _getQuestions();\n    console.log(response, \":::::::::::::::\"); //dispatch(getQuestionsSuccess(data));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n    console.log(error, \"::: ERROR IN THUNK :::\");\n  }\n};\nexport const fetchOneQuestion = questionID => async dispatch => {\n  try {\n    dispatch(startLoading());\n    const response = await fetch(`https://jsonplaceholder.typicode.com/${questionID}`);\n    const data = await response.json();\n    dispatch(getQuestionsSuccess(data));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const createQuestion = question => async dispatch => {\n  try {\n    dispatch(addQuestion(question));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};","map":{"version":3,"sources":["/home/timiking/Apps/rather/src/redux/reducers/slices/questions.js"],"names":["createSlice","_getQuestions","initialState","loading","hasErrors","questions","slice","name","reducers","startLoading","state","addQuestion","action","unshift","payload","getOneQuestion","getQuestionsSuccess","getQuestionsFailure","actions","reducer","questionsSelector","fetchQuestions","dispatch","response","console","log","error","fetchOneQuestion","questionID","fetch","data","json","createQuestion","question"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport {_getQuestions} from \"../../../_DATA\";\n\n// Initial store \nexport const initialState = {\n    loading: false,\n    hasErrors: false,\n    questions: {},\n};\n\n// Questions slice\nconst slice = createSlice({\n    name: 'questions',\n    initialState,\n    reducers: {\n        startLoading: (state) => {\n            state.loading = true;\n        },\n        addQuestion: (state, action) => {\n            state.questions.unshift(action.payload); //TO-DO\n        },\n        getOneQuestion: (state, action)=>{\n            state.loading = action.payload;\n        },\n        getQuestionsSuccess: (state, action) => {\n            state.questions = action.payload;\n            state.loading = false;\n            state.hasErrors = false;\n        },\n        getQuestionsFailure: (state) => {\n            state.loading = false;\n            //handling Errors\n            state.hasErrors = true;\n        },\n    },\n});\n\n// Actions generated from the slice\nconst {\n    addQuestion,\n    startLoading,\n    getQuestionsFailure,\n    getQuestionsSuccess,\n} = slice.actions;\n\n// export The reducer\nexport default slice.reducer;\n\n// export user selector to get the slice in any component\nexport const questionsSelector = (state) => state.questions;\n\n// Thunk Actions\nexport const fetchQuestions = ()=> async (dispatch) => {\n    try {\n        dispatch(startLoading());\n\n        const response = await _getQuestions()\n\n        console.log(response,\":::::::::::::::\")\n        //dispatch(getQuestionsSuccess(data));\n\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n        console.log(error,\"::: ERROR IN THUNK :::\")\n    }\n};\n\nexport const fetchOneQuestion = (questionID)=> async (dispatch) => {\n    try {\n        dispatch(startLoading());\n\n        const response = await fetch(\n            `https://jsonplaceholder.typicode.com/${questionID}`,\n        );\n        const data = await response.json();\n\n        dispatch(getQuestionsSuccess(data));\n\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};\n\nexport const createQuestion = (question) => async ( dispatch) => {\n\n    try {\n        dispatch(addQuestion(question));\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};"]},"metadata":{},"sourceType":"module"}