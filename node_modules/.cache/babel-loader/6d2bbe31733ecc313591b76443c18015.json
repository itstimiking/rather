{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { _getQuestions, _saveQuestionAnswer, _saveQuestion } from \"../../../_DATA\"; // Initial store \n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  questions: {}\n}; // Questions slice\n\nconst slice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers: {\n    startLoading: state => {\n      state.loading = true;\n    },\n    addQuestion: (state, action) => {\n      state.questions = { ...state.questions,\n        ...action.payload\n      };\n      console.log(state.questions[action.payload.id]);\n    },\n    getQuestionsSuccess: (state, action) => {\n      state.questions = action.payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getQuestionsFailure: state => {\n      state.loading = false; //handling Errors\n\n      state.hasErrors = true;\n    }\n  }\n}); // Actions generated from the slice\n\nconst {\n  addQuestion,\n  startLoading,\n  getQuestionsFailure,\n  getQuestionsSuccess\n} = slice.actions; // export The reducer\n\nexport default slice.reducer; // export user selector to get the slice in any component\n\nexport const questionsSelector = state => state.questions; // Thunk Actions\n\nexport const fetchQuestions = () => async dispatch => {\n  try {\n    dispatch(startLoading());\n    const response = await _getQuestions();\n    dispatch(getQuestionsSuccess(response));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const saveQuestionAnswer = ({\n  authedUser,\n  qid,\n  answer\n}) => async dispatch => {\n  try {\n    _saveQuestionAnswer({\n      authedUser,\n      qid,\n      answer\n    });\n  } catch (err) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const createQuestion = question => async dispatch => {\n  try {\n    _saveQuestion(question).then(res => dispatch(addQuestion(res)));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};","map":{"version":3,"sources":["/home/timiking/Apps/rather/src/redux/reducers/slices/questions.js"],"names":["createSlice","_getQuestions","_saveQuestionAnswer","_saveQuestion","initialState","loading","hasErrors","questions","slice","name","reducers","startLoading","state","addQuestion","action","payload","console","log","id","getQuestionsSuccess","getQuestionsFailure","actions","reducer","questionsSelector","fetchQuestions","dispatch","response","error","saveQuestionAnswer","authedUser","qid","answer","err","createQuestion","question","then","res"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport {_getQuestions, _saveQuestionAnswer, _saveQuestion} from \"../../../_DATA\";\n\n// Initial store \nexport const initialState = {\n    loading: false,\n    hasErrors: false,\n    questions: {},\n};\n\n// Questions slice\nconst slice = createSlice({\n    name: 'questions',\n    initialState,\n    reducers: {\n        startLoading: (state) => {\n            state.loading = true;\n        },\n        addQuestion: (state, action) => {\n            state.questions = {...state.questions, ...action.payload};\n            console.log(state.questions[action.payload.id])\n        },\n        getQuestionsSuccess: (state, action) => {\n            state.questions = action.payload;\n            state.loading = false;\n            state.hasErrors = false;\n        },\n        getQuestionsFailure: (state) => {\n            state.loading = false;\n            //handling Errors\n            state.hasErrors = true;\n        },\n    },\n});\n \n// Actions generated from the slice\nconst {\n    addQuestion,\n    startLoading,\n    getQuestionsFailure,\n    getQuestionsSuccess,\n} = slice.actions;\n\n// export The reducer\nexport default slice.reducer;\n\n// export user selector to get the slice in any component\nexport const questionsSelector = (state) => state.questions;\n\n// Thunk Actions\nexport const fetchQuestions = ()=> async (dispatch) => {\n    try {\n        dispatch(startLoading());\n\n        const response = await _getQuestions()\n\n        dispatch(getQuestionsSuccess(response));\n\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};\n\nexport const saveQuestionAnswer = ({authedUser, qid, answer}) => async (dispatch) =>{\n    try{\n        _saveQuestionAnswer({authedUser, qid, answer})\n        \n    } catch(err){\n        dispatch(getQuestionsFailure());\n    }\n}\n\nexport const createQuestion = (question) => async ( dispatch) => {\n    try {\n        _saveQuestion(question)\n        .then(res=> dispatch(addQuestion(res)))\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};"]},"metadata":{},"sourceType":"module"}