{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { _getUsers } from \"../../../_DATA\"; // Initial store \n\nexport const initialState = {\n  hasError: false,\n  loading: false,\n  user: {},\n  users: {}\n}; // Questions slice\n\nconst slice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    startLoading: state => {\n      state.loading = true;\n    },\n    setUser: (state, action) => {\n      console.log(\":::::::::::::: USER SET :::::::::::\"); //state.user = action.payload\n    },\n    getAllUsers: (state, action) => {\n      state.users = action.payload;\n      state.loading = false;\n      state.hasError = false;\n    },\n    getUsersFailure: state => {\n      state.hasError = true;\n    }\n  }\n}); // Actions generated from the slice\n\nexport const {\n  setUser,\n  getAllUsers,\n  getUsersFailure,\n  startLoading\n} = slice.actions; // export The reducer\n\nexport default slice.reducer; // Thunk Actions\n\nexport const fetchAllUsers = () => async dispatch => {\n  try {\n    dispatch(startLoading());\n    const response = await _getUsers();\n    dispatch(getAllUsers(response));\n  } catch (error) {\n    dispatch(getUsersFailure());\n  }\n};","map":{"version":3,"sources":["/home/timiking/Apps/rather/src/redux/reducers/slices/users.js"],"names":["createSlice","_getUsers","initialState","hasError","loading","user","users","slice","name","reducers","startLoading","state","setUser","action","console","log","getAllUsers","payload","getUsersFailure","actions","reducer","fetchAllUsers","dispatch","response","error"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,SAAR,QAAwB,gBAAxB,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,QAAQ,EAAC,KADe;AAExBC,EAAAA,OAAO,EAAE,KAFe;AAGxBC,EAAAA,IAAI,EAAE,EAHkB;AAIxBC,EAAAA,KAAK,EAAC;AAJkB,CAArB,C,CAOP;;AACA,MAAMC,KAAK,GAAGP,WAAW,CAAC;AACtBQ,EAAAA,IAAI,EAAE,OADgB;AAEtBN,EAAAA,YAFsB;AAGtBO,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAGC,KAAD,IAAU;AACpBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACH,KAHK;AAINQ,IAAAA,OAAO,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAa,qCAAb,EADwB,CAExB;AACH,KAPK;AAQNC,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAQE,MAAR,KAAkB;AAC3BF,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACI,OAArB;AACAN,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACR,QAAN,GAAiB,KAAjB;AACH,KAZK;AAaNe,IAAAA,eAAe,EAAGP,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACR,QAAN,GAAiB,IAAjB;AACH;AAfK;AAHY,CAAD,CAAzB,C,CAsBA;;AACA,OAAO,MAAM;AACTS,EAAAA,OADS;AAETI,EAAAA,WAFS;AAGTE,EAAAA,eAHS;AAITR,EAAAA;AAJS,IAKTH,KAAK,CAACY,OALH,C,CAOP;;AACA,eAAeZ,KAAK,CAACa,OAArB,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAK,MAAOC,QAAP,IAAoB;AAClD,MAAI;AACAA,IAAAA,QAAQ,CAACZ,YAAY,EAAb,CAAR;AAEA,UAAMa,QAAQ,GAAG,MAAMtB,SAAS,EAAhC;AAEAqB,IAAAA,QAAQ,CAACN,WAAW,CAACO,QAAD,CAAZ,CAAR;AAEH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZF,IAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;AACH;AACJ,CAXM","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport {_getUsers} from \"../../../_DATA\";\n\n// Initial store \nexport const initialState = {\n    hasError:false,\n    loading: false,\n    user: {},\n    users:{}\n};\n\n// Questions slice\nconst slice = createSlice({\n    name: 'users',\n    initialState,\n    reducers: {\n        startLoading: (state) =>{\n            state.loading = true;\n        },\n        setUser: (state, action) => {\n            console.log( \":::::::::::::: USER SET :::::::::::\")\n            //state.user = action.payload\n        },\n        getAllUsers: (state, action) =>{\n            state.users = action.payload ;\n            state.loading = false;\n            state.hasError = false;\n        },\n        getUsersFailure: (state) => {\n            state.hasError = true\n        }\n    },\n});\n\n// Actions generated from the slice\nexport const {\n    setUser,\n    getAllUsers,\n    getUsersFailure,\n    startLoading\n} = slice.actions;\n\n// export The reducer\nexport default slice.reducer;\n\n// Thunk Actions\nexport const fetchAllUsers = ()=> async (dispatch) => {\n    try {\n        dispatch(startLoading());\n\n        const response = await _getUsers()\n\n        dispatch(getAllUsers(response));\n\n    } catch (error) {\n        dispatch(getUsersFailure());\n    }\n};\n"]},"metadata":{},"sourceType":"module"}