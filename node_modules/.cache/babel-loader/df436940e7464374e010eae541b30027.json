{"ast":null,"code":"import { createSlice, current } from '@reduxjs/toolkit';\nimport { _getQuestions, _saveQuestionAnswer, _saveQuestion } from \"../../../_DATA\"; // Initial store \n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  questions: {}\n}; // Questions slice\n\nconst slice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers: {\n    startLoading: state => {\n      state.loading = true;\n    },\n    finishedLoading: state => {\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    addQuestion: (state, action) => {\n      state.questions = { ...action.payload.questions,\n        [action.payload.formattedQuestion.id]: action.payload.formattedQuestion\n      };\n    },\n    getQuestionsSuccess: (state, action) => {\n      state.questions = action.payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getQuestionsFailure: state => {\n      state.loading = false; //handling Errors\n\n      state.hasErrors = true;\n    }\n  }\n}); // Actions generated from the slice\n\nconst {\n  addQuestion,\n  startLoading,\n  finishedLoading,\n  getQuestionsFailure,\n  getQuestionsSuccess\n} = slice.actions; // export The reducer\n\nexport default slice.reducer; // export user selector to get the slice in any component\n\nexport const questionsSelector = state => state.questions; // Thunk Actions\n\nexport const fetchQuestions = () => async dispatch => {\n  try {\n    dispatch(startLoading());\n    const response = await _getQuestions();\n    dispatch(getQuestionsSuccess(response));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const saveQuestionAnswer = ({\n  authedUser,\n  qid,\n  answer\n}) => async dispatch => {\n  try {\n    dispatch(startLoading());\n\n    _saveQuestionAnswer({\n      authedUser,\n      qid,\n      answer\n    }).then(() => dispatch(finishedLoading()));\n  } catch (err) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const createQuestion = question => async dispatch => {\n  try {\n    dispatch(startLoading());\n\n    _saveQuestion(question).then(res => {\n      dispatch(addQuestion(res));\n      dispatch(finishedLoading());\n    });\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};","map":{"version":3,"sources":["/home/timiking/Apps/rather/src/redux/reducers/slices/questions.js"],"names":["createSlice","current","_getQuestions","_saveQuestionAnswer","_saveQuestion","initialState","loading","hasErrors","questions","slice","name","reducers","startLoading","state","finishedLoading","addQuestion","action","payload","formattedQuestion","id","getQuestionsSuccess","getQuestionsFailure","actions","reducer","questionsSelector","fetchQuestions","dispatch","response","error","saveQuestionAnswer","authedUser","qid","answer","then","err","createQuestion","question","res"],"mappings":"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","sourcesContent":["import {createSlice, current} from '@reduxjs/toolkit';\nimport {_getQuestions, _saveQuestionAnswer, _saveQuestion} from \"../../../_DATA\";\n\n// Initial store \nexport const initialState = {\n    loading: false,\n    hasErrors: false,\n    questions: {},\n};\n\n// Questions slice\nconst slice = createSlice({\n    name: 'questions',\n    initialState,\n    reducers: {\n        startLoading: (state) => {\n            state.loading = true;\n        },\n        finishedLoading: (state)=>{\n            state.loading = false;\n            state.hasErrors = false;\n        },\n        addQuestion: (state, action) => {\n            state.questions = {...action.payload.questions, [action.payload.formattedQuestion.id]: action.payload.formattedQuestion }\n            \n        },\n        getQuestionsSuccess: (state, action) => {\n            state.questions = action.payload;\n            state.loading = false;\n            state.hasErrors = false;\n        },\n        getQuestionsFailure: (state) => {\n            state.loading = false;\n            //handling Errors\n            state.hasErrors = true;\n        },\n    },\n});\n \n// Actions generated from the slice\nconst {\n    addQuestion,\n    startLoading,\n    finishedLoading,\n    getQuestionsFailure,\n    getQuestionsSuccess,\n} = slice.actions;\n\n// export The reducer\nexport default slice.reducer;\n\n// export user selector to get the slice in any component\nexport const questionsSelector = (state) => state.questions;\n\n// Thunk Actions\nexport const fetchQuestions = ()=> async (dispatch) => {\n    try {\n        dispatch(startLoading());\n\n        const response = await _getQuestions()\n\n        dispatch(getQuestionsSuccess(response));\n\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};\n\nexport const saveQuestionAnswer = ({authedUser, qid, answer}) => async (dispatch) =>{\n    try{\n        dispatch(startLoading())\n        _saveQuestionAnswer({authedUser, qid, answer})\n        .then(()=>dispatch(finishedLoading()))\n    } catch(err){\n        dispatch(getQuestionsFailure());\n    }\n}\n\nexport const createQuestion = (question) => async ( dispatch) => {\n    try {\n        dispatch(startLoading())\n        _saveQuestion(question)\n        .then(res=> {\n            dispatch(addQuestion(res))\n            dispatch(finishedLoading())\n        })\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};"]},"metadata":{},"sourceType":"module"}