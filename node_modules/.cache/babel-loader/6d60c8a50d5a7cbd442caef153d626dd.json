{"ast":null,"code":"import { createSlice, current } from '@reduxjs/toolkit';\nimport { _getQuestions, _saveQuestionAnswer, _saveQuestion } from \"../../../_DATA\"; // Initial store \n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  questions: {}\n}; // Questions slice\n\nconst slice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers: {\n    startLoading: state => {\n      state.loading = true;\n    },\n    addQuestion: (state, action) => {\n      const questions = state.questions;\n      console.log(questions);\n    },\n    getQuestionsSuccess: (state, action) => {\n      state.questions = action.payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getQuestionsFailure: state => {\n      state.loading = false; //handling Errors\n\n      state.hasErrors = true;\n    }\n  }\n}); // Actions generated from the slice\n\nconst {\n  addQuestion,\n  startLoading,\n  getQuestionsFailure,\n  getQuestionsSuccess\n} = slice.actions; // export The reducer\n\nexport default slice.reducer; // export user selector to get the slice in any component\n\nexport const questionsSelector = state => state.questions; // Thunk Actions\n\nexport const fetchQuestions = () => async dispatch => {\n  try {\n    dispatch(startLoading());\n    const response = await _getQuestions();\n    dispatch(getQuestionsSuccess(response));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const saveQuestionAnswer = ({\n  authedUser,\n  qid,\n  answer\n}) => async dispatch => {\n  try {\n    _saveQuestionAnswer({\n      authedUser,\n      qid,\n      answer\n    });\n  } catch (err) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const createQuestion = question => async dispatch => {\n  try {\n    _saveQuestion(question).then(res => dispatch(addQuestion(res)));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};","map":{"version":3,"sources":["/home/timiking/Apps/rather/src/redux/reducers/slices/questions.js"],"names":["createSlice","current","_getQuestions","_saveQuestionAnswer","_saveQuestion","initialState","loading","hasErrors","questions","slice","name","reducers","startLoading","state","addQuestion","action","console","log","getQuestionsSuccess","payload","getQuestionsFailure","actions","reducer","questionsSelector","fetchQuestions","dispatch","response","error","saveQuestionAnswer","authedUser","qid","answer","err","createQuestion","question","then","res"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,OAArB,QAAmC,kBAAnC;AACA,SAAQC,aAAR,EAAuBC,mBAAvB,EAA4CC,aAA5C,QAAgE,gBAAhE,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,OAAO,EAAE,KADe;AAExBC,EAAAA,SAAS,EAAE,KAFa;AAGxBC,EAAAA,SAAS,EAAE;AAHa,CAArB,C,CAMP;;AACA,MAAMC,KAAK,GAAGT,WAAW,CAAC;AACtBU,EAAAA,IAAI,EAAE,WADgB;AAEtBL,EAAAA,YAFsB;AAGtBM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAGC,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACH,KAHK;AAINQ,IAAAA,WAAW,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC5B,YAAMP,SAAS,GAAGK,KAAK,CAACL,SAAxB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACH,KAPK;AAQNU,IAAAA,mBAAmB,EAAE,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACpCF,MAAAA,KAAK,CAACL,SAAN,GAAkBO,MAAM,CAACI,OAAzB;AACAN,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACH,KAZK;AAaNa,IAAAA,mBAAmB,EAAGP,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB,CAD4B,CAE5B;;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACH;AAjBK;AAHY,CAAD,CAAzB,C,CAwBA;;AACA,MAAM;AACFO,EAAAA,WADE;AAEFF,EAAAA,YAFE;AAGFQ,EAAAA,mBAHE;AAIFF,EAAAA;AAJE,IAKFT,KAAK,CAACY,OALV,C,CAOA;;AACA,eAAeZ,KAAK,CAACa,OAArB,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAIV,KAAD,IAAWA,KAAK,CAACL,SAA3C,C,CAEP;;AACA,OAAO,MAAMgB,cAAc,GAAG,MAAK,MAAOC,QAAP,IAAoB;AACnD,MAAI;AACAA,IAAAA,QAAQ,CAACb,YAAY,EAAb,CAAR;AAEA,UAAMc,QAAQ,GAAG,MAAMxB,aAAa,EAApC;AAEAuB,IAAAA,QAAQ,CAACP,mBAAmB,CAACQ,QAAD,CAApB,CAAR;AAEH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZF,IAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR;AACH;AACJ,CAXM;AAaP,OAAO,MAAMQ,kBAAkB,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,GAAb;AAAkBC,EAAAA;AAAlB,CAAD,KAA+B,MAAON,QAAP,IAAmB;AAChF,MAAG;AACCtB,IAAAA,mBAAmB,CAAC;AAAC0B,MAAAA,UAAD;AAAaC,MAAAA,GAAb;AAAkBC,MAAAA;AAAlB,KAAD,CAAnB;AAEH,GAHD,CAGE,OAAMC,GAAN,EAAU;AACRP,IAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR;AACH;AACJ,CAPM;AASP,OAAO,MAAMa,cAAc,GAAIC,QAAD,IAAc,MAAQT,QAAR,IAAqB;AAC7D,MAAI;AACArB,IAAAA,aAAa,CAAC8B,QAAD,CAAb,CACCC,IADD,CACMC,GAAG,IAAGX,QAAQ,CAACX,WAAW,CAACsB,GAAD,CAAZ,CADpB;AAEH,GAHD,CAGE,OAAOT,KAAP,EAAc;AACZF,IAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR;AACH;AACJ,CAPM","sourcesContent":["import {createSlice, current} from '@reduxjs/toolkit';\nimport {_getQuestions, _saveQuestionAnswer, _saveQuestion} from \"../../../_DATA\";\n\n// Initial store \nexport const initialState = {\n    loading: false,\n    hasErrors: false,\n    questions: {},\n};\n\n// Questions slice\nconst slice = createSlice({\n    name: 'questions',\n    initialState,\n    reducers: {\n        startLoading: (state) => {\n            state.loading = true;\n        },\n        addQuestion: (state, action) => {\n            const questions = state.questions;\n            console.log(questions)\n        },\n        getQuestionsSuccess: (state, action) => {\n            state.questions = action.payload;\n            state.loading = false;\n            state.hasErrors = false;\n        },\n        getQuestionsFailure: (state) => {\n            state.loading = false;\n            //handling Errors\n            state.hasErrors = true;\n        },\n    },\n});\n \n// Actions generated from the slice\nconst {\n    addQuestion,\n    startLoading,\n    getQuestionsFailure,\n    getQuestionsSuccess,\n} = slice.actions;\n\n// export The reducer\nexport default slice.reducer;\n\n// export user selector to get the slice in any component\nexport const questionsSelector = (state) => state.questions;\n\n// Thunk Actions\nexport const fetchQuestions = ()=> async (dispatch) => {\n    try {\n        dispatch(startLoading());\n\n        const response = await _getQuestions()\n\n        dispatch(getQuestionsSuccess(response));\n\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};\n\nexport const saveQuestionAnswer = ({authedUser, qid, answer}) => async (dispatch) =>{\n    try{\n        _saveQuestionAnswer({authedUser, qid, answer})\n        \n    } catch(err){\n        dispatch(getQuestionsFailure());\n    }\n}\n\nexport const createQuestion = (question) => async ( dispatch) => {\n    try {\n        _saveQuestion(question)\n        .then(res=> dispatch(addQuestion(res)))\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};"]},"metadata":{},"sourceType":"module"}