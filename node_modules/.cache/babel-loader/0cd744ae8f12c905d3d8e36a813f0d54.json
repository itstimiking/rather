{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { _getQuestions, _saveQuestionAnswer } from \"../../../_DATA\"; // Initial store \n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  questions: {}\n}; // Questions slice\n\nconst slice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers: {\n    startLoading: state => {\n      state.loading = true;\n    },\n    addQuestion: (state, action) => {\n      state.questions.unshift(action.payload); //TO-DO\n    },\n    answerQuestion: (state, action) => {},\n    getQuestionsSuccess: (state, action) => {\n      state.questions = action.payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getQuestionsFailure: state => {\n      state.loading = false; //handling Errors\n\n      state.hasErrors = true;\n    }\n  }\n}); // Actions generated from the slice\n\nconst {\n  addQuestion,\n  startLoading,\n  answerQuestion,\n  getQuestionsFailure,\n  getQuestionsSuccess\n} = slice.actions; // export The reducer\n\nexport default slice.reducer; // export user selector to get the slice in any component\n\nexport const questionsSelector = state => state.questions; // Thunk Actions\n\nexport const fetchQuestions = () => async dispatch => {\n  try {\n    dispatch(startLoading());\n    const response = await _getQuestions();\n    dispatch(getQuestionsSuccess(response));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const saveQuestionAnswer = answer => async dispatch => {\n  try {\n    _saveQuestionAnswer({\n      authedUser: answer.userId,\n      qid: answer.questionId,\n      answer: answer.option\n    }).then(() => {});\n  } catch (err) {\n    dispatch(getQuestionsFailure());\n  }\n};\nexport const createQuestion = question => async dispatch => {\n  try {\n    dispatch(addQuestion(question));\n  } catch (error) {\n    dispatch(getQuestionsFailure());\n  }\n};","map":{"version":3,"sources":["/home/timiking/Apps/rather/src/redux/reducers/slices/questions.js"],"names":["createSlice","_getQuestions","_saveQuestionAnswer","initialState","loading","hasErrors","questions","slice","name","reducers","startLoading","state","addQuestion","action","unshift","payload","answerQuestion","getQuestionsSuccess","getQuestionsFailure","actions","reducer","questionsSelector","fetchQuestions","dispatch","response","error","saveQuestionAnswer","answer","authedUser","userId","qid","questionId","option","then","err","createQuestion","question"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,aAAR,EAAuBC,mBAAvB,QAAiD,gBAAjD,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,OAAO,EAAE,KADe;AAExBC,EAAAA,SAAS,EAAE,KAFa;AAGxBC,EAAAA,SAAS,EAAE;AAHa,CAArB,C,CAMP;;AACA,MAAMC,KAAK,GAAGP,WAAW,CAAC;AACtBQ,EAAAA,IAAI,EAAE,WADgB;AAEtBL,EAAAA,YAFsB;AAGtBM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAGC,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACH,KAHK;AAINQ,IAAAA,WAAW,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC5BF,MAAAA,KAAK,CAACL,SAAN,CAAgBQ,OAAhB,CAAwBD,MAAM,CAACE,OAA/B,EAD4B,CACa;AAC5C,KANK;AAONC,IAAAA,cAAc,EAAE,CAACL,KAAD,EAAQE,MAAR,KAAiB,CAEhC,CATK;AAUNI,IAAAA,mBAAmB,EAAE,CAACN,KAAD,EAAQE,MAAR,KAAmB;AACpCF,MAAAA,KAAK,CAACL,SAAN,GAAkBO,MAAM,CAACE,OAAzB;AACAJ,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACH,KAdK;AAeNa,IAAAA,mBAAmB,EAAGP,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB,CAD4B,CAE5B;;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACH;AAnBK;AAHY,CAAD,CAAzB,C,CA0BA;;AACA,MAAM;AACFO,EAAAA,WADE;AAEFF,EAAAA,YAFE;AAGFM,EAAAA,cAHE;AAIFE,EAAAA,mBAJE;AAKFD,EAAAA;AALE,IAMFV,KAAK,CAACY,OANV,C,CAQA;;AACA,eAAeZ,KAAK,CAACa,OAArB,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAIV,KAAD,IAAWA,KAAK,CAACL,SAA3C,C,CAEP;;AACA,OAAO,MAAMgB,cAAc,GAAG,MAAK,MAAOC,QAAP,IAAoB;AACnD,MAAI;AACAA,IAAAA,QAAQ,CAACb,YAAY,EAAb,CAAR;AAEA,UAAMc,QAAQ,GAAG,MAAMvB,aAAa,EAApC;AAEAsB,IAAAA,QAAQ,CAACN,mBAAmB,CAACO,QAAD,CAApB,CAAR;AAEH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZF,IAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR;AACH;AACJ,CAXM;AAaP,OAAO,MAAMQ,kBAAkB,GAAIC,MAAD,IAAY,MAAOJ,QAAP,IAAmB;AAC7D,MAAG;AACCrB,IAAAA,mBAAmB,CAAC;AAChB0B,MAAAA,UAAU,EAAED,MAAM,CAACE,MADH;AAEhBC,MAAAA,GAAG,EAAEH,MAAM,CAACI,UAFI;AAGhBJ,MAAAA,MAAM,EAAEA,MAAM,CAACK;AAHC,KAAD,CAAnB,CAIGC,IAJH,CAIQ,MAAI,CAEX,CAND;AAOH,GARD,CAQE,OAAMC,GAAN,EAAU;AACRX,IAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR;AACH;AACJ,CAZM;AAcP,OAAO,MAAMiB,cAAc,GAAIC,QAAD,IAAc,MAAQb,QAAR,IAAqB;AAE7D,MAAI;AACAA,IAAAA,QAAQ,CAACX,WAAW,CAACwB,QAAD,CAAZ,CAAR;AACH,GAFD,CAEE,OAAOX,KAAP,EAAc;AACZF,IAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR;AACH;AACJ,CAPM","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport {_getQuestions, _saveQuestionAnswer} from \"../../../_DATA\";\n\n// Initial store \nexport const initialState = {\n    loading: false,\n    hasErrors: false,\n    questions: {},\n};\n\n// Questions slice\nconst slice = createSlice({\n    name: 'questions',\n    initialState,\n    reducers: {\n        startLoading: (state) => {\n            state.loading = true;\n        },\n        addQuestion: (state, action) => {\n            state.questions.unshift(action.payload); //TO-DO\n        },\n        answerQuestion: (state, action)=>{            \n            \n        },\n        getQuestionsSuccess: (state, action) => {\n            state.questions = action.payload;\n            state.loading = false;\n            state.hasErrors = false;\n        },\n        getQuestionsFailure: (state) => {\n            state.loading = false;\n            //handling Errors\n            state.hasErrors = true;\n        },\n    },\n});\n\n// Actions generated from the slice\nconst {\n    addQuestion,\n    startLoading,\n    answerQuestion,\n    getQuestionsFailure,\n    getQuestionsSuccess,\n} = slice.actions;\n\n// export The reducer\nexport default slice.reducer;\n\n// export user selector to get the slice in any component\nexport const questionsSelector = (state) => state.questions;\n\n// Thunk Actions\nexport const fetchQuestions = ()=> async (dispatch) => {\n    try {\n        dispatch(startLoading());\n\n        const response = await _getQuestions()\n\n        dispatch(getQuestionsSuccess(response));\n\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};\n\nexport const saveQuestionAnswer = (answer) => async (dispatch) =>{\n    try{\n        _saveQuestionAnswer({\n            authedUser: answer.userId,\n            qid: answer.questionId,\n            answer: answer.option\n        }).then(()=>{\n            \n        })\n    } catch(err){\n        dispatch(getQuestionsFailure());\n    }\n}\n\nexport const createQuestion = (question) => async ( dispatch) => {\n\n    try {\n        dispatch(addQuestion(question));\n    } catch (error) {\n        dispatch(getQuestionsFailure());\n    }\n};"]},"metadata":{},"sourceType":"module"}